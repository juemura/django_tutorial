#!/usr/bin/env python3
import re
import sys

'''
QWERTY Keyboard:
 1,  2,  3,  4,  5,  6,  7,  8,  9,  0
 Q,  W,  E,  R,  T,  Y,  U,  I,  O,  P
 A,  S,  D,  F,  G,  H,  J,  K,  L,  ;
 Z,  X,  C,  V,  B,  N,  M,  ,,  .,  /

QWERTY Keyboard represented by ASCII Values:
49, 50, 51, 52, 53, 54, 55, 56, 57, 48
81, 87, 69, 82, 84, 89, 85, 73, 79, 80
65, 83, 68, 70, 71, 72, 74, 75, 76, 59
90, 88, 67, 86, 66, 78, 77, 44, 46, 47
'''

QUERTY_KB = [49, 50, 51, 52, 53, 54, 55, 56, 57, 48,
            81, 87, 69, 82, 84, 89, 85, 73, 79, 80,
            65, 83, 68, 70, 71, 72, 74, 75, 76, 59,
            90, 88, 67, 86, 66, 78, 77, 44, 46, 47]

def transform_kb(original_kb, transformations):
    """Returns a new keyboard after performing in order a sequence of transformations on a given a keyboard.
    Valid transformations:
    H = flip horizontally
    V = flip vertically
    S followed by an integer = shift

    Parameters
    ----------
    original_kb : list
        The original keyboard.
    transformations : str
        The sequence of transformations to be performed.

    Returns
    -------
    list
        The new keyboard after performing a sequence of transformations

    Error Handling
    --------------
    Non-valid transformations are ignored
    """
    new_keyboard = original_kb
    # cmds is the list of transformations to be performed
    cmds = re.findall(r'(H|V|S[+-]?\d+)', transformations.upper())
    for cmd in cmds:
        if cmd == 'H':
            # horizontal flip
            new_keyboard = [item for i in range(4) for item in new_keyboard[i*10:(i+1)*10][::-1]] 
            # 4 is the number of rows and 10 is the number of columns
        elif cmd == 'V':
            # vertical flip
            new_keyboard = [item for i in range(4, 0, -1) for item in new_keyboard[(i-1)*10:i*10]]
        else:
            # shift
            n = int(cmd[1:])
            new_keyboard = new_keyboard[-n:] + new_keyboard[:-n]
    return new_keyboard


def create_alphabet(kb):
    """Returns a dictionary that maps characters to their index.

    Parameters
    ----------
    kb : list
        The given keyboard represented as a list.

    Returns
    -------
    dict
        A dictionary that maps each character to its index in the list representation of a given keyboard.
    """
    return {chr(char): idx for (idx, char) in enumerate(kb)}


def type_text(kb, chars):
    """Returns the text generated by typing a sequence of characters on a given keyboard.

    Parameters
    ----------
    kb : list
        The keyboard.
    chars : str
        The sequence of characters to be typed.

    Returns
    -------
    str
        The text generated

    Error Handling
    --------------
    Non-valid characters are ignored
    """
    alphabet = create_alphabet(QUERTY_KB)
    return ''.join([chr(kb[alphabet[char.upper()]]) for char in chars if char.upper() in alphabet])

if __name__ == '__main__':
    test_word_1 = "1234567890Hello,World/"
    # print(type_text(QUERTY_KB, test_word_1))
    assert(type_text(QUERTY_KB, test_word_1) == "1234567890Hello,World/".upper())
    test_cmds_1 = 'S-1'
    test_kb_1 = transform_kb(QUERTY_KB, test_cmds_1)
    new_word_1 = type_text(test_kb_1, test_word_1)
    # print(new_word_1)
    assert(new_word_1 == "234567890QJR;;P.EPT;F1")

    test_cmds_2 = 'S1'
    test_kb_2 = transform_kb(QUERTY_KB, test_cmds_2)
    new_word_2 = type_text(test_kb_2, test_word_1)
    # print(new_word_2)
    assert(new_word_2 == "/123456789GWKKIMQIEKS.")

    test_cmds_3 = 'fV'
    test_kb_3 = transform_kb(QUERTY_KB, test_cmds_3)
    # print(test_kb_3)
    expected_3 = [90, 88, 67, 86, 66, 78, 77, 44, 46, 47, 65, 83, 68, 70, 71, 72, 74, 75, 76, 59, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
    assert(test_kb_3 == expected_3)

    test_cmds_4 = 'Hf2ds'
    test_kb_4 = transform_kb(QUERTY_KB, test_cmds_4)
    # print(test_kb_4)
    expected_4 = [48, 57, 56, 55, 54, 53, 52, 51, 50, 49, 80, 79, 73, 85, 89, 84, 82, 69, 87, 81, 59, 76, 75, 74, 72, 71, 70, 68, 83, 65, 47, 46, 44, 77, 78, 66, 86, 67, 88, 90]
    assert(test_kb_4 == expected_4)

    test_word_2 = "46bjhbejhHJBJB/ndjks.cjkaDJAS,nK;1133"
    test_cmds_5 = 'HvHvs-2s-10VS12VHVHS3'
    test_kb_5 = transform_kb(QUERTY_KB, test_cmds_5)
    # print(test_kb_5)
    expected_5 = [75, 76, 59, 90, 88, 69, 82, 84, 89, 85, 73, 79, 80, 65, 83, 51, 52, 53, 54, 55, 56, 57, 48, 81, 87, 67, 86, 66, 78, 77, 44, 46, 47, 49, 50, 68, 70, 71, 72, 74]
    new_word_2 = type_text(test_kb_5, test_word_2)
    # print(new_word_2)
    # print(type_text(QUERTY_KB, new_word_2))
    assert(type_text(QUERTY_KB, new_word_2) == type_text(test_kb_5, test_word_2))

    test_word_3 = "!46"
    new_word_3 = type_text(test_kb_5, test_word_3)
    # print(new_word_3)
    assert(new_word_3 == 'ZE')

    test_word_4 = ""
    new_word_4 = type_text(test_kb_5, test_word_4)
    # print(new_word_3)
    assert(new_word_4 == '')

    cmd1 = 'HVS3'
    cmd2 = 's3hv'
    cmd3 = 's3vh'
    cmd4 = 'hs1vs4hvhs-1v'
    assert(transform_kb(QUERTY_KB, cmd1) == transform_kb(QUERTY_KB, cmd2))
    assert(transform_kb(QUERTY_KB, cmd1) == transform_kb(QUERTY_KB, cmd3))
    assert(transform_kb(QUERTY_KB, cmd1) == transform_kb(QUERTY_KB, cmd4))